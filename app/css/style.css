/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$g=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [g=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */
template {
  display: none;
}

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}

@font-face {
  font-family: "lime-icon";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/limeicon/limeicon.eot?#iefix") format("embedded-opentype"), url("../fonts/limeicon/limeicon.woff2") format("woff2"), url("../fonts/limeicon/limeicon.woff") format("woff"), url("../fonts/limeicon/limeicon.ttf") format("truetype"), url("../fonts/limeicon/limeicon.svg#lime-icon") format("svg");
}

@font-face {
  font-family: "opensans-regular";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/opensans-regular/opensans-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/opensans-regular/opensans-regular.woff2") format("woff2"), url("../fonts/opensans-regular/opensans-regular.woff") format("woff"), url("../fonts/opensans-regular/opensans-regular.ttf") format("truetype"), url("../fonts/opensans-regular/opensans-regular.svg#opensans-regular") format("svg");
}

@font-face {
  font-family: "proximanova-regular";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/proximanova-regular/proximanova-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/proximanova-regular/proximanova-regular.woff2") format("woff2"), url("../fonts/proximanova-regular/proximanova-regular.woff") format("woff"), url("../fonts/proximanova-regular/proximanova-regular.ttf") format("truetype"), url("../fonts/proximanova-regular/proximanova-regular.svg#proximanova-regular") format("svg");
}

@font-face {
  font-family: "proximanova-semibold";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/proximanova-semibold/proximanova-semibold.eot?#iefix") format("embedded-opentype"), url("../fonts/proximanova-semibold/proximanova-semibold.woff2") format("woff2"), url("../fonts/proximanova-semibold/proximanova-semibold.woff") format("woff"), url("../fonts/proximanova-semibold/proximanova-semibold.ttf") format("truetype"), url("../fonts/proximanova-semibold/proximanova-semibold.svg#proximanova-semibold") format("svg");
}

@font-face {
  font-family: "robotoslab-regular";
  font-style: normal;
  font-weight: normal;
  src: url("../fonts/robotoslab-regular/robotoslab-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/robotoslab-regular/robotoslab-regular.woff2") format("woff2"), url("../fonts/robotoslab-regular/robotoslab-regular.woff") format("woff"), url("../fonts/robotoslab-regular/robotoslab-regular.ttf") format("truetype"), url("../fonts/robotoslab-regular/robotoslab-regular.svg#robotoslab-regular") format("svg");
}

[class^="icon-"]:before, [class*=" icon-"]:before {
  font-family: "lime-icon";
  font-style: normal;
  font-weight: normal;
  speak: none;
  display: inline-block;
  text-decoration: inherit;
  width: 1em;
  text-align: center;
  font-variant: normal;
  text-transform: none;
  line-height: 1em;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-quote:before {
  content: '\e800';
}

.icon-eye:before {
  content: '\e801';
}

.icon-comment:before {
  content: '\e802';
}

.icon-download:before {
  content: '\e803';
}

.icon-menu:before {
  content: '\e804';
}

.icon-home:before {
  content: '\e805';
}

.icon-right-arrow:before {
  content: '\e806';
}

.icon-right-arrow-circular:before {
  content: '\e807';
}

.icon-twitter:before {
  content: '\f099';
}

.icon-facebook:before {
  content: '\f09a';
}

.icon-angle-right:before {
  content: '\f105';
}

.icon-pinterest:before {
  content: '\f231';
}

.icon-gplus:before {
  content: '\f30f';
}

html, body {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
}

body {
  font: normal 1rem/1.42 "opensans-regular", sans-serif;
  min-width: 320px;
}

.container {
  margin: 0 auto;
  padding: 0 10px;
  max-width: 940px;
  *zoom: 1;
}

.container:before, .container:after {
  content: '';
  display: table;
}

.container:after {
  clear: both;
}

img {
  max-width: 100%;
  height: auto;
}

.btn {
  display: inline-block;
  padding: .5rem 1.5rem;
  border: none;
  background: #86c840;
  color: #fff;
  text-transform: uppercase;
  text-decoration: none;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.4);
  -webkit-border-radius: 3px;
          border-radius: 3px;
  cursor: pointer;
  -webkit-transition: .3s;
  transition: .3s;
}

.btn:hover {
  background: #6ca530;
}

.heading-block {
  margin: 3.3rem 0;
  padding-left: 1.2rem;
  border-left: 6px solid #86c840;
  color: #424242;
}

.heading-block h2 {
  margin: 0;
  font-family: "robotoslab-regular", sans-serif;
  font-size: 2.125rem;
  color: #222;
  line-height: 1.2;
  text-transform: capitalize;
}

.header {
  position: relative;
  padding: 2rem 0;
  margin-bottom: 1rem;
  *zoom: 1;
}

.header:before, .header:after {
  content: '';
  display: table;
}

.header:after {
  clear: both;
}

.logo {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 69.1%;
  margin-left: 0%;
  margin-right: 3%;
  font-family: Arial, sans-serif;
  font-size: 1.375rem;
  letter-spacing: 2px;
  font-weight: bold;
  text-transform: uppercase;
  color: #86c840;
}

.logo:before, .logo:after {
  content: '';
  display: table;
}

.logo:after {
  clear: both;
}

.logo:last-child {
  margin-right: 0%;
}

.logo__img, .logo__text {
  display: inline-block;
  vertical-align: middle;
}

.logo__text span {
  color: #000;
}

.top-nav {
  text-align: right;
  vertical-align: middle;
  font-family: "robotoslab-regular", sans-serif;
}

.top-nav__list {
  display: none;
  position: absolute;
  margin-top: -.5rem;
  padding: 1.5rem 0;
  top: 100%;
  background: #79b935;
  width: 100%;
  left: 0;
  text-align: center;
  list-style: none;
}

.top-nav__link {
  display: block;
  padding: .5rem 0;
  text-decoration: none;
  color: #fff;
  -webkit-transition: .5s;
  transition: .5s;
}

.top-nav__link:hover {
  background: #6ca530;
}

.top-nav__trigger {
  font-size: 2rem;
  text-decoration: none;
}

.top-nav__trigger {
  cursor: pointer;
  width: 30px;
  height: 26px;
  right: 10px;
  top: 50%;
  margin-top: -13px;
  position: absolute;
}

.top-nav__trigger i {
  background-color: #000;
  -webkit-border-radius: 2px;
          border-radius: 2px;
  content: '';
  display: block;
  width: 100%;
  height: 4px;
}

.top-nav__trigger i:nth-child(1) {
  -webkit-animation: outT 0.8s backwards;
  animation: outT 0.8s backwards;
  -webkit-animation-direction: reverse;
  animation-direction: reverse;
}

.top-nav__trigger i:nth-child(2) {
  margin: 5px 0;
  -webkit-animation: outM 0.8s backwards;
  animation: outM 0.8s backwards;
  -webkit-animation-direction: reverse;
  animation-direction: reverse;
}

.top-nav__trigger i:nth-child(3) {
  -webkit-animation: outBtm 0.8s backwards;
  animation: outBtm 0.8s backwards;
  -webkit-animation-direction: reverse;
  animation-direction: reverse;
}

.top-nav__trigger.active i:nth-child(1) {
  -webkit-animation: inT 0.8s forwards;
  animation: inT 0.8s forwards;
}

.top-nav__trigger.active i:nth-child(2) {
  -webkit-animation: inM 0.8s forwards;
  animation: inM 0.8s forwards;
}

.top-nav__trigger.active i:nth-child(3) {
  -webkit-animation: inBtm 0.8s forwards;
  animation: inBtm 0.8s forwards;
}

@-webkit-keyframes inM {
  50% {
    -webkit-transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(45deg);
  }
}

@keyframes inM {
  50% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
  }
}

@-webkit-keyframes outM {
  50% {
    -webkit-transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(45deg);
  }
}

@keyframes outM {
  50% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
  }
}

@-webkit-keyframes inT {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(9px) rotate(135deg);
  }
}

@keyframes inT {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
            transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(9px) rotate(0deg);
            transform: translateY(9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(9px) rotate(135deg);
            transform: translateY(9px) rotate(135deg);
  }
}

@-webkit-keyframes outT {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(9px) rotate(135deg);
  }
}

@keyframes outT {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
            transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(9px) rotate(0deg);
            transform: translateY(9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(9px) rotate(135deg);
            transform: translateY(9px) rotate(135deg);
  }
}

@-webkit-keyframes inBtm {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(-9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(-9px) rotate(135deg);
  }
}

@keyframes inBtm {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
            transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(-9px) rotate(0deg);
            transform: translateY(-9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(-9px) rotate(135deg);
            transform: translateY(-9px) rotate(135deg);
  }
}

@-webkit-keyframes outBtm {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(-9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(-9px) rotate(135deg);
  }
}

@keyframes outBtm {
  0% {
    -webkit-transform: translateY(0px) rotate(0deg);
            transform: translateY(0px) rotate(0deg);
  }
  50% {
    -webkit-transform: translateY(-9px) rotate(0deg);
            transform: translateY(-9px) rotate(0deg);
  }
  100% {
    -webkit-transform: translateY(-9px) rotate(135deg);
            transform: translateY(-9px) rotate(135deg);
  }
}

.feature {
  padding: 2rem 0 4rem;
  background: url("../images/feature_bg.jpg") no-repeat center 30%;
  background-size: cover;
}

.feature__heading {
  font-family: "robotoslab-regular", sans-serif;
  font-size: 2.125rem;
  text-transform: capitalize;
}

.feature__desc {
  margin-bottom: 2rem;
}

.subcribe__text {
  margin-bottom: 1rem;
}

.subcribe__inputbox {
  padding: .5rem;
  border: 1px solid #dadada;
  color: #aaa;
  max-width: 160px;
}

.subcribe__btn {
  background: #79b935;
}

.subcribe__btn:hover {
  background: #86c840;
}

.freebies {
  margin: 2rem 0;
}

.freebies__list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.freebies__item {
  margin-bottom: 2rem;
}

.freebie__imagebox {
  position: relative;
  padding: 5px;
  background: #eee;
  -webkit-border-radius: 5px;
          border-radius: 5px;
  overflow: hidden;
}

.freebie__imagebox img {
  width: 100%;
  -webkit-border-radius: 3px;
          border-radius: 3px;
  vertical-align: middle;
}

.freebie__info {
  position: absolute;
  padding: .8rem;
  bottom: 5px;
  left: 5px;
  right: 5px;
  background: rgba(0, 0, 0, 0.85);
  color: #fff;
  font-size: 0.75rem;
  -webkit-border-radius: 0 0 3px 3px;
          border-radius: 0 0 3px 3px;
}

.freebie__info > div {
  display: inline-block;
}

.freebie__info-counts {
  float: right;
}

.freebie__info-counts > div {
  display: inline-block;
  margin-right: 10px;
}

.freebie__info-counts > div:last-child {
  margin-right: 0;
}

.freebie__desc {
  position: relative;
  padding: 1rem 50px 1rem .6rem;
}

.freebie__desc__heading {
  margin: 0;
}

.freebie__btn {
  position: absolute;
  right: .6rem;
  top: 50%;
  margin-top: -1.2rem;
}

.freebie__btn .icon-right-arrow {
  font-size: 30px;
  color: #86c840;
}

.freebies__more {
  text-align: center;
}

.freebies__more .icon-angle-right {
  font-size: 22px;
}

.quote {
  padding: 2rem 0;
  background: #f1f1f1;
  font-size: 1.625rem;
  color: #111;
  text-align: center;
}

.quote__text {
  position: relative;
  padding: 0 3rem;
}

.quote__text:before, .quote__text:after {
  position: absolute;
  background: #86c840;
  font-family: "proximanova-regular", sans-serif;
  font-size: 75px;
  color: #fff;
  width: 44px;
  height: 44px;
  text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.2);
  -webkit-border-radius: 50%;
          border-radius: 50%;
}

.quote__text:before {
  top: 5px;
  left: 0;
  content: '\201c';
}

.quote__text:after {
  right: 0;
  bottom: 5px;
  content: '\201d';
}

.news {
  padding: 2rem 0;
}

.news__list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.news__item {
  margin-bottom: 2rem;
}

.news__item img {
  width: 100%;
}

.news__title {
  margin: .5rem 0 0;
  font-family: "robotoslab-regular", sans-serif;
  font-size: 1.625rem;
}

.news__post-info {
  margin-bottom: 2rem;
  font-size: 0.75rem;
  color: #aaa;
}

.news__post-info > div {
  display: inline-block;
  margin-right: 5px;
}

.news__post-info > div:before {
  content: '';
  display: inline-block;
  margin-right: 5px;
  background: #86c840;
  width: 5px;
  height: 5px;
  vertical-align: middle;
  -webkit-border-radius: 50%;
          border-radius: 50%;
}

.news__post-info > div:first-child:before {
  display: none;
}

.news__more .icon-right-arrow-circular {
  font-size: 18px;
}

@media screen and (min-width: 481px) {
  .freebies__item {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 48.5%;
    margin-left: 0%;
    margin-right: 3%;
  }
  .freebies__item:before, .freebies__item:after {
    content: '';
    display: table;
  }
  .freebies__item:after {
    clear: both;
  }
  .freebies__item:nth-child(2n) {
    margin-right: 0%;
    float: right;
  }
  .freebies__item:nth-child(2n + 1) {
    clear: both;
  }
}

@media screen and (min-width: 769px) {
  .logo {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 27.9%;
    margin-left: 0%;
    margin-right: 3%;
  }
  .logo:before, .logo:after {
    content: '';
    display: table;
  }
  .logo:after {
    clear: both;
  }
  .logo:last-child {
    margin-right: 0%;
  }
  .top-nav {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 69.1%;
    margin-left: 0%;
    margin-right: 3%;
  }
  .top-nav:before, .top-nav:after {
    content: '';
    display: table;
  }
  .top-nav:after {
    clear: both;
  }
  .top-nav:last-child {
    margin-right: 0%;
  }
  .top-nav__list {
    display: block;
    position: relative;
    padding: .5rem 0;
    background: #fff;
    text-align: right;
  }
  .top-nav__item {
    display: inline-block;
    margin-right: 2.5rem;
  }
  .top-nav__item:last-child {
    margin-right: 0;
  }
  .top-nav__link {
    color: #222;
  }
  .top-nav__trigger {
    display: none;
  }
  .feature__wrap {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 50%;
    margin-left: 0%;
    margin-right: 0%;
  }
  .feature__wrap:before, .feature__wrap:after {
    content: '';
    display: table;
  }
  .feature__wrap:after {
    clear: both;
  }
  .feature__wrap:last-child {
    margin-right: 0%;
  }
}

@media screen and (min-width: 961px) {
  .feature__wrap {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 32%;
    margin-left: 0%;
    margin-right: 0%;
  }
  .feature__wrap:before, .feature__wrap:after {
    content: '';
    display: table;
  }
  .feature__wrap:after {
    clear: both;
  }
  .feature__wrap:last-child {
    margin-right: 0%;
  }
  .freebies__item {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 31.33333%;
    margin-left: 0%;
    margin-right: 3%;
  }
  .freebies__item:before, .freebies__item:after {
    content: '';
    display: table;
  }
  .freebies__item:after {
    clear: both;
  }
  .freebies__item:nth-child(2n) {
    margin-right: 3%;
    float: left;
  }
  .freebies__item:nth-child(2n + 1) {
    clear: none;
  }
  .freebies__item:nth-child(3n) {
    margin-right: 0%;
    float: right;
  }
  .freebies__item:nth-child(3n + 1) {
    clear: both;
  }
  .freebies__item:hover .freebie__info {
    bottom: 0;
  }
  .freebie__info {
    bottom: -100%;
    -webkit-transition: .5s;
    transition: .5s;
  }
  .quote__text {
    padding: 0 5rem;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
